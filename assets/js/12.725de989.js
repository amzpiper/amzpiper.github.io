(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{727:function(s,n,a){s.exports=a.p+"assets/img/Untitled.fb026cc5.png"},728:function(s,n,a){s.exports=a.p+"assets/img/Untitled1.03c87c18.png"},729:function(s,n,a){s.exports=a.p+"assets/img/Untitled2.6363ea8d.png"},730:function(s,n,a){s.exports=a.p+"assets/img/Untitled3.d3f35838.png"},731:function(s,n,a){s.exports=a.p+"assets/img/Untitled4.8b6a0b98.png"},732:function(s,n,a){s.exports=a.p+"assets/img/Untitled5.090547be.png"},733:function(s,n,a){s.exports=a.p+"assets/img/Untitled6.219a7767.png"},734:function(s,n,a){s.exports=a.p+"assets/img/Untitled7.b88b9970.png"},735:function(s,n,a){s.exports=a.p+"assets/img/Untitled8.a90d148b.png"},829:function(s,n,a){"use strict";a.r(n);var t=a(24),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"关键字-synchronized"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关键字-synchronized"}},[s._v("#")]),s._v(" 关键字-synchronized")]),s._v(" "),t("aside",[s._v("\n💡 在C程序代码中我们可以利用操作系统提供的互斥锁来实现同步块的互斥访问及线程的阻塞及唤醒等工作。在Java中除了提供Lock API外还在语法层面上提供了synchronized关键字来实现互斥同步原语, 本文将对synchronized关键字详细分析。\n")]),s._v(" "),t("h2",{attrs:{id:"带着bat大厂的面试问题去理解synchronized"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#带着bat大厂的面试问题去理解synchronized"}},[s._v("#")]),s._v(" 带着BAT大厂的面试问题去理解Synchronized")]),s._v(" "),t("p",[s._v("请带着这些问题继续后文，会很大程度上帮助你更好的理解synchronized。")]),s._v(" "),t("ul",[t("li",[s._v("Synchronized可以"),t("strong",[s._v("作用")]),s._v("在哪里? 分别通过"),t("strong",[s._v("对象锁")]),s._v("和"),t("strong",[s._v("类锁")]),s._v("进行举例。")]),s._v(" "),t("li",[s._v("Synchronized本质上是"),t("strong",[s._v("通过什么保证线程安全")]),s._v("的? 分三个方面回答："),t("strong",[s._v("加锁和释放锁的原理")]),s._v("，"),t("strong",[s._v("可重入原理")]),s._v("，保证"),t("strong",[s._v("可见性原理")]),s._v("。")]),s._v(" "),t("li",[s._v("Synchronized由什么样的"),t("strong",[s._v("缺陷")]),s._v("? Java "),t("strong",[s._v("Lock是怎么弥补")]),s._v("这些缺陷的。")]),s._v(" "),t("li",[s._v("Synchronized和Lock的"),t("strong",[s._v("对比")]),s._v("，和选择?")]),s._v(" "),t("li",[s._v("Synchronized在使用时有何"),t("strong",[s._v("注意事项")]),s._v("?")]),s._v(" "),t("li",[s._v("Synchronized修饰的方法在"),t("strong",[s._v("抛出异常时,会释放锁吗")]),s._v("?")]),s._v(" "),t("li",[s._v("多个线程等待同一个snchronized锁的时候，JVM如何"),t("strong",[s._v("选择下一个获取锁的线程")]),s._v("?")]),s._v(" "),t("li",[s._v("Synchronized使得同时只有一个线程可以执行，性能比较差，有什么"),t("strong",[s._v("提升性能的方法")]),s._v("?")]),s._v(" "),t("li",[s._v("我"),t("strong",[s._v("想更加灵活地控制锁的释放和获取")]),s._v("(现在释放锁和获取锁的时机都被规定死了)，怎么办?")]),s._v(" "),t("li",[s._v("什么是"),t("strong",[s._v("锁的升级和降级")]),s._v("? 什么是JVM里的"),t("strong",[s._v("偏斜锁、轻量级锁、重量级锁")]),s._v("?")]),s._v(" "),t("li",[t("strong",[s._v("不同的JDK中对Synchronized有何优化")]),s._v("?")])]),s._v(" "),t("h2",{attrs:{id:"synchronized的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized的使用"}},[s._v("#")]),s._v(" Synchronized的使用")]),s._v(" "),t("p",[s._v("在应用Sychronized关键字时需要把握如下注意点：")]),s._v(" "),t("ul",[t("li",[s._v("一把锁只能同时被一个线程获取，没有获得锁的线程只能等待；")]),s._v(" "),t("li",[s._v("每个实例都对应有自己的一把锁(this),不同实例之间互不影响；例外：锁对象是*.class以及synchronized修饰的是static方法的时候，所有对象公用同一把锁")]),s._v(" "),t("li",[s._v("synchronized修饰的方法，无论方法正常执行完毕还是抛出异常，都会释放锁")])]),s._v(" "),t("h3",{attrs:{id:"对象锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象锁"}},[s._v("#")]),s._v(" 对象锁")]),s._v(" "),t("p",[s._v("包括方法锁(默认锁对象为this,当前实例对象)和同步代码块锁(自己指定锁对象)")]),s._v(" "),t("h3",{attrs:{id:"代码块形式-手动指定锁定对象-也可是是this-也可以是自定义的锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码块形式-手动指定锁定对象-也可是是this-也可以是自定义的锁"}},[s._v("#")]),s._v(" "),t("strong",[s._v("代码块形式：手动指定锁定对象，也可是是this,也可以是自定义的锁")])]),s._v(" "),t("ul",[t("li",[s._v("示例1")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class SynchronizedObjectLock implements Runnable {\n    static SynchronizedObjectLock instence = new SynchronizedObjectLock();\n\n    @Override\n    public void run() {\n        // 同步代码块形式——锁为this,两个线程使用的锁是一样的,线程1必须要等到线程0释放了该锁后，才能执行\n        synchronized (this) {\n            System.out.println("我是线程" + Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName() + "结束");\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(instence);\n        Thread t2 = new Thread(instence);\n        t1.start();\n        t2.start();\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[s._v("输出结果：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("我是线程Thread-0\nThread-0结束\n我是线程Thread-1\nThread-1结束\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("示例2")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class SynchronizedObjectLock implements Runnable {\n    static SynchronizedObjectLock instence = new SynchronizedObjectLock();\n    // 创建2把锁\n    Object block1 = new Object();\n    Object block2 = new Object();\n\n    @Override\n    public void run() {\n        // 这个代码块使用的是第一把锁，当他释放后，后面的代码块由于使用的是第二把锁，因此可以马上执行\n        synchronized (block1) {\n            System.out.println("block1锁,我是线程" + Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("block1锁,"+Thread.currentThread().getName() + "结束");\n        }\n\n        synchronized (block2) {\n            System.out.println("block2锁,我是线程" + Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println("block2锁,"+Thread.currentThread().getName() + "结束");\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(instence);\n        Thread t2 = new Thread(instence);\n        t1.start();\n        t2.start();\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br")])]),t("p",[s._v("输出结果：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("block1锁,我是线程Thread-0\nblock1锁,Thread-0结束\nblock2锁,我是线程Thread-0　　// 可以看到当第一个线程在执行完第一段同步代码块之后，第二个同步代码块可以马上得到执行，因为他们使用的锁不是同一把\nblock1锁,我是线程Thread-1\nblock2锁,Thread-0结束\nblock1锁,Thread-1结束\nblock2锁,我是线程Thread-1\nblock2锁,Thread-1结束\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"方法锁形式-synchronized修饰普通方法-锁对象默认为this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法锁形式-synchronized修饰普通方法-锁对象默认为this"}},[s._v("#")]),s._v(" 方法锁形式：synchronized修饰普通方法，锁对象默认为this")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class SynchronizedObjectLock implements Runnable {\n    static SynchronizedObjectLock instence = new SynchronizedObjectLock();\n\n    @Override\n    public void run() {\n        method();\n    }\n\n    public synchronized void method() {\n        System.out.println("我是线程" + Thread.currentThread().getName());\n        try {\n            Thread.sleep(3000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(Thread.currentThread().getName() + "结束");\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(instence);\n        Thread t2 = new Thread(instence);\n        t1.start();\n        t2.start();\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("输出结果：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("我是线程Thread-0\nThread-0结束\n我是线程Thread-1\nThread-1结束\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"类锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类锁"}},[s._v("#")]),s._v(" 类锁")]),s._v(" "),t("p",[s._v("指synchronize修饰静态的方法或指定锁对象为Class对象")]),s._v(" "),t("p",[t("strong",[s._v("synchronize修饰静态方法")])]),s._v(" "),t("ul",[t("li",[s._v("示例1")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class SynchronizedObjectLock implements Runnable {\n    static SynchronizedObjectLock instence1 = new SynchronizedObjectLock();\n    static SynchronizedObjectLock instence2 = new SynchronizedObjectLock();\n\n    @Override\n    public void run() {\n        method();\n    }\n\n    // synchronized用在普通方法上，默认的锁就是this，当前实例\n    public synchronized void method() {\n        System.out.println("我是线程" + Thread.currentThread().getName());\n        try {\n            Thread.sleep(3000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(Thread.currentThread().getName() + "结束");\n    }\n\n    public static void main(String[] args) {\n        // t1和t2对应的this是两个不同的实例，所以代码不会串行\n        Thread t1 = new Thread(instence1);\n        Thread t2 = new Thread(instence2);\n        t1.start();\n        t2.start();\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[s._v("输出结果：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("我是线程Thread-0\n我是线程Thread-1\nThread-1结束\nThread-0结束\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("示例2")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class SynchronizedObjectLock implements Runnable {\n    static SynchronizedObjectLock instence1 = new SynchronizedObjectLock();\n    static SynchronizedObjectLock instence2 = new SynchronizedObjectLock();\n\n    @Override\n    public void run() {\n        method();\n    }\n\n    // synchronized用在静态方法上，默认的锁就是当前所在的Class类，所以无论是哪个线程访问它，需要的锁都只有一把\n    public static synchronized void method() {\n        System.out.println("我是线程" + Thread.currentThread().getName());\n        try {\n            Thread.sleep(3000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(Thread.currentThread().getName() + "结束");\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(instence1);\n        Thread t2 = new Thread(instence2);\n        t1.start();\n        t2.start();\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("输出结果：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("我是线程Thread-0\nThread-0结束\n我是线程Thread-1\nThread-1结束\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("synchronized指定锁对象为Class对象")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('public class SynchronizedObjectLock implements Runnable {\n    static SynchronizedObjectLock instence1 = new SynchronizedObjectLock();\n    static SynchronizedObjectLock instence2 = new SynchronizedObjectLock();\n\n    @Override\n    public void run() {\n        // 所有线程需要的锁都是同一把\n        synchronized(SynchronizedObjectLock.class){\n            System.out.println("我是线程" + Thread.currentThread().getName());\n            try {\n                Thread.sleep(3000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(Thread.currentThread().getName() + "结束");\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(instence1);\n        Thread t2 = new Thread(instence2);\n        t1.start();\n        t2.start();\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("输出结果：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("我是线程"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("结束\n我是线程"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("结束\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h2",{attrs:{id:"synchronized原理分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized原理分析"}},[s._v("#")]),s._v(" Synchronized原理分析")]),s._v(" "),t("h3",{attrs:{id:"加锁和释放锁的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加锁和释放锁的原理"}},[s._v("#")]),s._v(" 加锁和释放锁的原理")]),s._v(" "),t("blockquote",[t("p",[s._v("现象、时机(内置锁this)、深入JVM看字节码(反编译看monitor指令)")])]),s._v(" "),t("p",[s._v("深入JVM看字节码，创建如下的代码：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public class SynchronizedDemo2 {\n\n    Object object = new Object();\n    public void method1() {\n        synchronized (object) {\n\n        }\n        method2();\n    }\n\n    private static void method2() {\n\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("使用javac命令进行编译生成.class文件")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(">javac SynchronizedDemo2.java\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("使用javap命令反编译查看.class文件的信息")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(">javap -verbose SynchronizedDemo2.class\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("得到如下的信息：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(727),alt:"Untitled"}})]),s._v(" "),t("p",[s._v("关注红色方框里的"),t("code",[s._v("monitorenter")]),s._v("和"),t("code",[s._v("monitorexit")]),s._v("即可。")]),s._v(" "),t("p",[t("code",[s._v("Monitorenter")]),s._v("和"),t("code",[s._v("Monitorexit")]),s._v("指令，会让对象在执行，使其锁计数器加1或者减1。每一个对象在同一时间只与一个monitor(锁)相关联，而一个monitor在同一时间只能被一个线程获得，一个对象在尝试获得与这个对象相关联的Monitor锁的所有权的时候，monitorenter指令会发生如下3中情况之一：")]),s._v(" "),t("ul",[t("li",[s._v("monitor计数器为0，意味着目前还没有被获得，那这个线程就会立刻获得然后把锁计数器+1，一旦+1，别的线程再想获取，就需要等待")]),s._v(" "),t("li",[s._v("如果这个monitor已经拿到了这个锁的所有权，又重入了这把锁，那锁计数器就会累加，变成2，并且随着重入的次数，会一直累加")]),s._v(" "),t("li",[s._v("这把锁已经被别的线程获取了，等待锁释放")])]),s._v(" "),t("p",[t("code",[s._v("monitorexit指令")]),s._v("：释放对于monitor的所有权，释放过程很简单，就是讲monitor的计数器减1，如果减完以后，计数器不是0，则代表刚才是重入进来的，当前线程还继续持有这把锁的所有权，如果计数器变成0，则代表当前线程不再拥有该monitor的所有权，即释放锁。")]),s._v(" "),t("p",[s._v("下图表现了对象，对象监视器，同步队列以及执行线程状态之间的关系：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(728),alt:"Untitled"}})]),s._v(" "),t("p",[s._v("该图可以看出，任意线程对Object的访问，首先要获得Object的监视器，如果获取失败，该线程就进入同步状态，线程状态变为BLOCKED，当Object的监视器占有者释放后，在同步队列中得线程就会有机会重新获取该监视器。")]),s._v(" "),t("h3",{attrs:{id:"可重入原理-加锁次数计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可重入原理-加锁次数计数器"}},[s._v("#")]),s._v(" "),t("strong",[s._v("可重入原理：加锁次数计数器")])]),s._v(" "),t("p",[s._v("上面的demo中在执行完同步代码块"),t("code",[s._v("method1")]),s._v("之后紧接着再会去执行一个静态同步方法"),t("code",[s._v("method2")]),s._v("，而这个方法锁的对象依然就这个类对象，那么这个正在执行的线程还需要获取该锁吗? 答案是不必的，从上图中就可以看出来，执行静态同步方法的时候就只有一条monitorexit指令，并没有monitorenter获取锁的指令。这就是锁的重入性，即在同一锁程中，线程不需要再次获取同一把锁。")]),s._v(" "),t("p",[s._v("Synchronized先天具有重入性。每个对象拥有一个计数器，当线程获取该对象锁后，计数器就会加一，释放锁后就会将计数器减一。")]),s._v(" "),t("h3",{attrs:{id:"保证可见性的原理-内存模型和happens-before规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#保证可见性的原理-内存模型和happens-before规则"}},[s._v("#")]),s._v(" 保证可见性的原理：内存模型和happens-before规则")]),s._v(" "),t("p",[s._v("Synchronized的"),t("code",[s._v("happens-before")]),s._v("规则，即监视器锁规则：对同一个监视器的"),t("strong",[s._v("解锁")]),s._v("，"),t("code",[s._v("happens-before")]),t("strong",[s._v("于")]),s._v("对该监视器的"),t("strong",[s._v("加锁")]),s._v("。继续来看代码：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MonitorDemo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("writer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n        a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 2")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                                       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 3")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("reader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("                                      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 6")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[s._v("该代码的happens-before关系如图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(729),alt:"Untitled"}})]),s._v(" "),t("p",[s._v("在图中每一个箭头连接的"),t("strong",[s._v("两个节点就代表之间的happens-before关系")]),s._v("，"),t("strong",[s._v("黑色的是通过程序顺序规则推导出来")]),s._v("，"),t("strong",[s._v("红色的为监视器锁规则推导而出")]),s._v("："),t("strong",[s._v("线程A释放锁(解锁)happens-before线程B加锁")]),s._v("，蓝色的则是通过程序顺序规则和监视器锁规则推测出来happens-before关系，通过传递性规则进一步推导的happens-before关系。现在我们来重点关注2 happens-before 5，通过这个关系我们可以得出什么?")]),s._v(" "),t("p",[s._v("根据happens-before的定义中的一条:"),t("strong",[s._v("如果A happens-before B，则A的执行结果对B可见，并且A的执行顺序先于B")]),s._v("。线程A先对共享变量A进行加一，"),t("strong",[s._v("由2 happens-before 5关系可知线程A的执行结果对线程B可见即线程B所读取到的a的值为1")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"jvm中锁的优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm中锁的优化"}},[s._v("#")]),s._v(" JVM中锁的优化")]),s._v(" "),t("p",[s._v("简单来说在JVM中monitorenter和monitorexit字节码依赖于底层的操作系统的Mutex Lock来实现的，但是由于使用Mutex Lock需要将当前线程挂起并从用户态切换到内核态来执行，这种切换的代价是非常昂贵的；然而在现实中的大部分情况下，同步方法是运行在单线程环境(无锁竞争环境)如果每次都调用Mutex Lock那么将严重的影响程序的性能。"),t("strong",[s._v("不过在jdk1.6中对锁的实现引入了大量的优化，如锁粗化(Lock Coarsening)、锁消除(Lock Elimination)、轻量级锁(Lightweight Locking)、偏向锁(Biased Locking)、适应性自旋(Adaptive Spinning)等技术来减少锁操作的开销")]),s._v("。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("锁粗化(Lock Coarsening)")]),s._v("：也就是减少不必要的紧连在一起的unlock，lock操作，将多个连续的锁"),t("strong",[s._v("扩展成一个范围更大的锁")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("锁消除(Lock Elimination)")]),s._v("：通过运行时JIT编译器的逃逸分析来"),t("strong",[s._v("消除一些没有在当前同步块以外被其他线程共享的数据的锁")]),s._v("保护，通过逃逸分析也可以在线程本地Stack上进行对象空间的分配(同时还可以减少Heap上的垃圾收集开销)。")]),s._v(" "),t("li",[t("code",[s._v("轻量级锁(Lightweight Locking)")]),s._v("：这种锁实现的背后"),t("strong",[s._v("基于这样一种假设")]),s._v("，即在真实的情况下我们程序中的"),t("strong",[s._v("大部分同步代码一般都处于无锁竞争状态")]),s._v("(即单线程执行环境)，"),t("strong",[s._v("在无锁竞争的情况下完全可以避免调用操作系统层面的重量级互斥锁")]),s._v("，"),t("strong",[s._v("取而代之")]),s._v("的"),t("strong",[s._v("是在monitorenter和monitorexit中只需要依靠一条CAS原子指令就可以完成锁的获取及释放")]),s._v("。当"),t("strong",[s._v("存在锁竞争的情况下，执行CAS指令失败的线程将调用操作系统互斥锁")]),s._v("进入到阻塞状态，当"),t("strong",[s._v("锁被释放的时候被唤醒")]),s._v("(具体处理步骤下面详细讨论)。")]),s._v(" "),t("li",[t("code",[s._v("偏向锁(Biased Locking)")]),s._v("：是为了在无锁竞争的情况下"),t("strong",[s._v("避免在锁获取过程中执行不必要的CAS原子指令")]),s._v("，因为"),t("strong",[s._v("CAS原子指令")]),s._v("虽然相对于重量级锁来说开销比较小"),t("strong",[s._v("但还是存在非常可观的本地延迟")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("适应性自旋(Adaptive Spinning)")]),s._v("：当线程在"),t("strong",[s._v("获取轻量级锁的过程中执行CAS操作失败时")]),s._v("，在"),t("strong",[s._v("进入")]),s._v("与monitor相关联的"),t("strong",[s._v("操作系统重量级锁")]),s._v("(mutex semaphore)"),t("strong",[s._v("前会进入忙等待")]),s._v("(Spinning)然后"),t("strong",[s._v("再次尝试")]),s._v("，当"),t("strong",[s._v("尝试一定的次数后如果仍然没有成功则调用与该monitor关联的semaphore(即互斥锁)进入到阻塞状态")]),s._v("。")])]),s._v(" "),t("blockquote",[t("p",[s._v("下面来详细讲解下，先从Synchronied同步锁开始讲起：")])]),s._v(" "),t("h3",{attrs:{id:"锁的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁的类型"}},[s._v("#")]),s._v(" "),t("strong",[s._v("锁的类型")])]),s._v(" "),t("p",[s._v("在Java SE 1.6里Synchronied同步锁，一共有四种状态："),t("code",[s._v("无锁")]),s._v("、"),t("code",[s._v("偏向锁")]),s._v("、"),t("code",[s._v("轻量级所")]),s._v("、"),t("code",[s._v("重量级锁")]),s._v("，它会随着竞争情况逐渐升级。锁可以升级但是不可以降级，目的是为了提供获取锁和释放锁的效率。")]),s._v(" "),t("blockquote",[t("p",[s._v("锁膨胀方向： 无锁 → 偏向锁 → 轻量级锁 → 重量级锁 (此过程是不可逆的)")])]),s._v(" "),t("h3",{attrs:{id:"自旋锁与自适应自旋锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自旋锁与自适应自旋锁"}},[s._v("#")]),s._v(" 自旋锁与自适应自旋锁")]),s._v(" "),t("p",[t("strong",[s._v("自旋锁")])]),s._v(" "),t("blockquote",[t("p",[s._v("引入背景：大家都知道，在没有加入锁优化时，Synchronized是一个非常“胖大”的家伙。在多线程竞争锁时，当一个线程获取锁时，它会阻塞所有正在竞争的线程，这样对性能带来了极大的影响。在挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作对系统的并发性能带来了很大的压力。同时HotSpot团队注意到在很多情况下，共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和回复阻塞线程并不值得。在如今多处理器环境下，完全可以让另一个没有获取到锁的线程在门外等待一会(自旋)，但不放弃CPU的执行时间。等待持有锁的线程是否很快就会释放锁。为了让线程等待，我们只需要让线程执行一个忙循环(自旋)，这便是自旋锁由来的原因。")])]),s._v(" "),t("p",[s._v("自旋锁早在JDK1.4 中就引入了，只是当时默认时关闭的。在JDK 1.6后默认为开启状态。自旋锁本质上与阻塞并不相同，先不考虑其对多处理器的要求，如果锁占用的时间非常的短，那么自旋锁的性能会非常的好，相反，其会带来更多的性能开销(因为在线程自旋时，始终会占用CPU的时间片，如果锁占用的时间太长，那么自旋的线程会白白消耗掉CPU资源)。因此自旋等待的时间必须要有一定的限度，如果"),t("strong",[s._v("自旋超过了限定的次数仍然没有成功获取到锁，就应该使用传统的方式去挂起线程")]),s._v("了，在JDK定义中，"),t("strong",[s._v("自旋锁默认的自旋次数为10次，用户可以使用参数"),t("code",[s._v("-XX:PreBlockSpin")]),s._v("来更改")]),s._v("。")]),s._v(" "),t("p",[s._v("可是现在又出现了一个问题："),t("strong",[s._v("如果线程锁在线程自旋刚结束就释放掉了锁，那么是不是有点得不偿失")]),s._v("。所以这时候我们"),t("strong",[s._v("需要更加聪明的锁")]),s._v("来实现更加灵活的自旋。来提高并发的性能。(这里则需要自适应自旋锁！)")]),s._v(" "),t("p",[t("strong",[s._v("自适应自旋锁")])]),s._v(" "),t("p",[s._v("在JDK 1.6中引入了自适应自旋锁。这就意味着自旋的时间不再固定了，而是由前一次在同一个锁上的自旋 时间及锁的拥有者的状态来决定的。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行中，那么JVM会认为该锁自旋获取到锁的可能性很大，会自动增加等待时间。比如增加到100此循环。相反，如果对于某个锁，自旋很少成功获取锁。那再以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器资源。有了自适应自旋，JVM对程序的锁的状态预测会越来越准确，JVM也会越来越聪明。")]),s._v(" "),t("h3",{attrs:{id:"锁消除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁消除"}},[s._v("#")]),s._v(" 锁消除")]),s._v(" "),t("p",[s._v("锁消除是指虚拟机即时编译器再运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除的主要判定依据来源于逃逸分析的数据支持。意思就是：JVM会判断再一段程序中的同步明显不会逃逸出去从而被其他线程访问到，那JVM就把它们当作栈上数据对待，认为这些数据时线程独有的，不需要加同步。此时就会进行锁消除。")]),s._v(" "),t("p",[s._v("当然在实际开发中，我们很清楚的知道那些地方时线程独有的，不需要加同步锁，但是在Java API中有很多方法都是加了同步的，那么此时JVM会判断这段代码是否需要加锁。如果数据并不会逃逸，则会进行锁消除。比如如下操作：在操作String类型数据时，由于String是一个不可变类，对字符串的连接操作总是通过生成的新的String对象来进行的。因此Javac编译器会对String连接做自动优化。在JDK 1.5之前会使用StringBuffer对象的连续append()操作，在JDK 1.5及以后的版本中，会转化为StringBuidler对象的连续append()操作。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test03")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" s3"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("上述代码使用javap编译结果：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(730),alt:"Untitled"}})]),s._v(" "),t("p",[s._v("众所周知，StringBuilder不是安全同步的，但是在上述代码中，JVM判断该段代码并不会逃逸，则将该代码带默认为线程独有的资源，并不需要同步，所以执行了锁消除操作。(还有Vector中的各种操作也可实现锁消除。在没有逃逸出数据安全防卫内)")]),s._v(" "),t("h3",{attrs:{id:"锁粗化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁粗化"}},[s._v("#")]),s._v(" 锁粗化")]),s._v(" "),t("p",[s._v("原则上，我们都知道"),t("strong",[s._v("在加同步锁时，尽可能的将同步块的作用范围限制到尽量小的范围")]),s._v("(只"),t("strong",[s._v("在共享数据的实际作用域中才进行同步")]),s._v("，这样是为了"),t("strong",[s._v("使得需要同步的操作数量尽可能变小")]),s._v("。在存在锁同步竞争中，也可以"),t("strong",[s._v("使得等待锁的线程尽早的拿到锁")]),s._v(")。")]),s._v(" "),t("p",[s._v("大部分上述情况是完美正确的，但是"),t("strong",[s._v("如果存在连串的一系列操作都对同一个对象反复加锁和解锁")]),s._v("，"),t("strong",[s._v("甚至加锁操作时出现在循环体中的")]),s._v("，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要地性能操作。")]),s._v(" "),t("p",[s._v("这里贴上根据上述Javap 编译地情况编写地实例java类")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("public static String test04(String s1, String s2, String s3) {\n    StringBuilder sb = new StringBuilder();\n    sb.append(s1);\n    sb.append(s2);\n    sb.append(s3);\n    return sb.toString();\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("在上述地"),t("strong",[s._v("连续append()操作中就属于这类情况")]),s._v("。JVM会检测到这样一连串地操作都是对同一个对象加锁，那么"),t("strong",[s._v("JVM会将加锁同步地范围扩展(粗化)到整个一系列操作的外部")]),s._v("，使整个一连串地append()操作"),t("strong",[s._v("只需要加锁一次")]),s._v("就可以了。")]),s._v(" "),t("h3",{attrs:{id:"轻量级锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#轻量级锁"}},[s._v("#")]),s._v(" 轻量级锁")]),s._v(" "),t("p",[s._v("在JDK 1.6之后引入的轻量级锁，需要注意的是轻量级锁并不是替代重量级锁的，而是对在大多数情况下同步块并不会有竞争出现提出的一种优化。它可以减少重量级锁对线程的阻塞带来地线程开销。从而提高并发性能。")]),s._v(" "),t("p",[s._v("如果要理解轻量级锁，那么必须先要了解HotSpot虚拟机中对象头地内存布局。上面介绍Java对象头也详细介绍过。在对象头中("),t("code",[s._v("Object Header")]),s._v(")存在两部分。第一部分用于存储对象自身的运行时数据，"),t("code",[s._v("HashCode")]),s._v("、"),t("code",[s._v("GC Age")]),s._v("、"),t("code",[s._v("锁标记位")]),s._v("、"),t("code",[s._v("是否为偏向锁")]),s._v("。等。一般为32位或者64位(视操作系统位数定)。官方称之为"),t("code",[s._v("Mark Word")]),s._v("，它是实现轻量级锁和偏向锁的关键。 另外一部分存储的是指向方法区对象类型数据的指针("),t("code",[s._v("Klass Point")]),s._v(")，如果对象是数组的话，还会有一个额外的部分用于存储数据的长度。")]),s._v(" "),t("p",[t("strong",[s._v("轻量级锁加锁")])]),s._v(" "),t("p",[s._v("在线程执行同步块之前，JVM会先在当前线程的栈帧中创建一个名为锁记录("),t("code",[s._v("Lock Record")]),s._v(")的空间，用于存储锁对象目前的"),t("code",[s._v("Mark Word")]),s._v("的拷贝（JVM会将对象头中的"),t("code",[s._v("Mark Word")]),s._v("拷贝到锁记录中，官方称为"),t("code",[s._v("Displaced Mark Ward")]),s._v("），这个时候线程堆栈与对象头的状态如图：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(731),alt:"Untitled"}})]),s._v(" "),t("p",[s._v("如上图所示：如果当前对象"),t("strong",[s._v("没有被锁定")]),s._v("，那么锁标志位位"),t("strong",[s._v("01")]),s._v("状态，JVM在执行当前线程时，首先会在当前线程栈帧中"),t("strong",[s._v("创建锁记录"),t("code",[s._v("Lock Record")]),s._v("的空间用于存储锁对象目前的"),t("code",[s._v("Mark Word")]),s._v("的拷贝")]),s._v("。")]),s._v(" "),t("p",[s._v("然后，虚拟机"),t("strong",[s._v("使用CAS操作将标记字段Mark Word拷贝到锁记录中")]),s._v("，并且"),t("strong",[s._v("将"),t("code",[s._v("Mark Word")]),s._v("更新为指向"),t("code",[s._v("Lock Record")]),s._v("的指针")]),s._v("。如果更新"),t("strong",[s._v("成功了")]),s._v("，那么这个"),t("strong",[s._v("线程就有用了该对象的锁")]),s._v("，并且对象"),t("strong",[s._v("Mark Word的锁标志位更新为")]),s._v("("),t("code",[s._v("Mark Word")]),s._v("中最后的2bit) "),t("strong",[s._v("00")]),s._v("，即"),t("strong",[s._v("表示此对象处于轻量级锁定状态")]),s._v("，如图：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(732),alt:"Untitled"}})]),s._v(" "),t("p",[s._v("如果这个更新操作失败，JVM会检查当前的"),t("code",[s._v("**Mark Word")]),s._v("中是否存在指向当前线程的栈帧的指针，如果有，说明该锁已经被获取**，可以直接调用。如果"),t("strong",[s._v("没有，则说明该锁被其他线程抢占")]),s._v("了，如果有"),t("strong",[s._v("两条以上的线程竞争同一个锁，那轻量级锁就不再有效，直接膨胀为重量级锁")]),s._v("，没有获得锁的线程会被阻塞。此时，锁的标志位为"),t("code",[s._v("10")]),s._v("，"),t("code",[s._v("Mark Word")]),s._v("中存储的是指向重量级锁的指针。")]),s._v(" "),t("p",[s._v("轻量级"),t("strong",[s._v("解锁时")]),s._v("，会"),t("strong",[s._v("使用原子的CAS操作将"),t("code",[s._v("Displaced Mark Word")]),s._v("替换回到对象头")]),s._v("中，如果"),t("strong",[s._v("成功，则表示没有发生竞争关系")]),s._v("。如果"),t("strong",[s._v("失败，表示当前锁存在竞争关系")]),s._v("。锁就会"),t("strong",[s._v("膨胀成重量级锁")]),s._v("。两个线程同时争夺锁，导致锁膨胀的流程图如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:a(733),alt:"Untitled"}})]),s._v(" "),t("h3",{attrs:{id:"偏向锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#偏向锁"}},[s._v("#")]),s._v(" 偏向锁")]),s._v(" "),t("blockquote",[t("p",[s._v("引入背景：在大多实际环境下，锁不仅不存在多线程竞争，而且总是由同一个线程多次获取，那么在同一个线程反复获取所释放锁中，其中并还没有锁的竞争，那么这样看上去，多次的获取锁和释放锁带来了很多不必要的性能开销和上下文切换。")])]),s._v(" "),t("p",[s._v("为了解决这一问题，HotSpot的作者在Java SE 1.6 中对Synchronized进行了优化，引入了偏向锁。当一个线程访问同步快并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和推出同步块时不需要进行CAS操作来加锁和解锁。只需要简单地测试一下对象头的"),t("code",[s._v("Mark Word")]),s._v("里是否存储着指向当前线程的偏向锁。如果成功，表示线程已经获取到了锁。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(734),alt:"Untitled"}})]),s._v(" "),t("p",[t("strong",[s._v("偏向锁的撤销")])]),s._v(" "),t("p",[s._v("偏向锁使用了一种等待竞争出现才会释放锁的机制。所以当其他线程尝试获取偏向锁时，持有偏向锁的线程才会释放锁。但是偏向锁的撤销需要等到全局安全点(就是当前线程没有正在执行的字节码)。它会首先暂停拥有偏向锁的线程，让你后检查持有偏向锁的线程是否活着。如果线程不处于活动状态，直接将对象头设置为无锁状态。如果线程活着，JVM会遍历栈帧中的锁记录，栈帧中的锁记录和对象头要么偏向于其他线程，要么恢复到无锁状态或者标记对象不适合作为偏向锁。")]),s._v(" "),t("p",[t("img",{attrs:{src:a(735),alt:"Untitled"}})]),s._v(" "),t("h3",{attrs:{id:"锁的优缺点对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁的优缺点对比"}},[s._v("#")]),s._v(" 锁的优缺点对比")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.notion.so/fdd75b3f1c524aadbc4059e3edf9a30d",target:"_blank",rel:"noopener noreferrer"}},[s._v("Untitled"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"synchronized与lock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized与lock"}},[s._v("#")]),s._v(" Synchronized与Lock")]),s._v(" "),t("h3",{attrs:{id:"synchronized的缺陷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized的缺陷"}},[s._v("#")]),s._v(" synchronized的缺陷")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("效率低")]),s._v("：锁的释放情况少，只有代码执行完毕或者异常结束才会释放锁；试图获取锁的时候不能设定超时，不能中断一个正在使用锁的线程，相对而言，Lock可以中断和设置超时")]),s._v(" "),t("li",[t("code",[s._v("不够灵活")]),s._v("：加锁和释放的时机单一，每个锁仅有一个单一的条件(某个对象)，相对而言，读写锁更加灵活")]),s._v(" "),t("li",[t("code",[s._v("无法知道是否成功获得锁")]),s._v("，相对而言，Lock可以拿到状态，如果成功获取锁，....，如果获取失败，.....")])]),s._v(" "),t("h3",{attrs:{id:"lock解决相应问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lock解决相应问题"}},[s._v("#")]),s._v(" Lock解决相应问题")]),s._v(" "),t("p",[s._v("Lock类这里不做过多解释，主要看里面的4个方法:")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("lock()")]),s._v(": 加锁")]),s._v(" "),t("li",[t("code",[s._v("unlock()")]),s._v(": 解锁")]),s._v(" "),t("li",[t("code",[s._v("tryLock()")]),s._v(": 尝试获取锁，返回一个boolean值")]),s._v(" "),t("li",[t("code",[s._v("tryLock(long,TimeUtil)")]),s._v(": 尝试获取锁，可以设置超时")])]),s._v(" "),t("p",[s._v("Synchronized只有锁只与一个条件(是否获取锁)相关联，不灵活，后来"),t("code",[s._v("Condition与Lock的结合")]),s._v("解决了这个问题。")]),s._v(" "),t("p",[t("strong",[s._v("多线程竞争一个锁时，其余未得到锁的线程只能不停的尝试获得锁，而不能中断。高并发的情况下会导致性能下降")]),s._v("。ReentrantLock的lockInterruptibly()方法可以优先考虑响应中断。 一个线程等待时间过长，它可以中断自己，然后ReentrantLock响应这个中断，不再让这个线程继续等待。有了这个机制，使用ReentrantLock时就不会像synchronized那样产生死锁了。")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("ReentrantLock")]),s._v("为常用类，它是一个"),t("strong",[s._v("可重入的互斥锁 Lock")]),s._v("，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。详细分析请看: "),t("a",{attrs:{href:"https://www.pdai.tech/md/java/thread/java-thread-x-lock-ReentrantLock.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("JUC锁: ReentrantLock详解"),t("OutboundLink")],1)])]),s._v(" "),t("h2",{attrs:{id:"再深入理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#再深入理解"}},[s._v("#")]),s._v(" "),t("strong",[s._v("再深入理解")])]),s._v(" "),t("p",[s._v("synchronized是通过软件(JVM)实现的，简单易用，即使在JDK5之后有了Lock，仍然被广泛地使用。")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("使用Synchronized有哪些要注意的？")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("锁对象不能为空")]),s._v("，因为锁的信息都保存在对象头里")]),s._v(" "),t("li",[t("strong",[s._v("作用域不宜过大")]),s._v("，影响程序执行的速度，控制范围过大，编写代码也容易出错")]),s._v(" "),t("li",[t("strong",[s._v("避免死锁")])]),s._v(" "),t("li",[s._v("在"),t("strong",[s._v("能选择的情况下，既不要用Lock也不要用synchronized关键字，用java.util.concurrent包中的各种各样的类")]),s._v("，如果不用该包下的类，在满足业务的情况下，可以使用synchronized关键，因为代码量少，避免出错")])])]),s._v(" "),t("li",[t("strong",[s._v("synchronized是公平锁吗？")])])]),s._v(" "),t("p",[s._v("synchronized实际上是"),t("strong",[s._v("非公平的")]),s._v("，新来的线程有可能立即获得监视器，而在等待区中等候已久的线程可能再次等待，这样有利于提高性能，但是也可能会导致饥饿现象。")]),s._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),t("p",[s._v("+《深入理解Java虚拟机》\n+《Java并发编程的艺术》")]),s._v(" "),t("ul",[t("li",[s._v("https://juejin.im/post/5ae6dc04f265da0ba351d3ff")]),s._v(" "),t("li",[s._v("https://www.cnblogs.com/javaminer/p/3889023.html")]),s._v(" "),t("li",[s._v("https://www.jianshu.com/p/dab7745c0954")]),s._v(" "),t("li",[s._v("https://www.cnblogs.com/wuchaodzxx/p/6867546.html")]),s._v(" "),t("li",[s._v("https://www.cnblogs.com/xyabk/p/10901291.html")]),s._v(" "),t("li",[s._v("https://www.jianshu.com/p/64240319ed60")])])])}),[],!1,null,null,null);n.default=e.exports}}]);